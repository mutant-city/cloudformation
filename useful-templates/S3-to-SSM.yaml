AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template to generically copy a file from S3 bucket to an SSM param
Parameters:
  pS3BucketName:
    Type: String
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$"
    ConstraintDescription: Bucket name can include numbers, lowercase
      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-).
  pS3toSSMObject:
    Type: String
    AllowedPattern: '^[^/][0-9a-zA-Z-_.]+(/[0-9a-zA-Z-_.]+)*'
    ConstraintDescription: Object location of the s3 version object including path.
      Can include numbers, lowercase letters, uppercase letters, periods (.), underscore(_), and hyphens (-). It cannot start or
      end with a hyphen (-) or a slash (/).
  pS3toSSMParameterName:
    Type: String
    AllowedPattern: '^(/[0-9a-zA-Z-_]+)+'
    ConstraintDescription: Name of Deploy Version SSM parameter. Must have progressive slash strings /xxx/yyy/zzz. Only 0-9a-zA-Z-_ are allowed for paths.
  pUpdateHash:
    Default: 0
    Description: This hash triggers updates on nested templates.
      This parameter is only used during an updating of the stack and must be changed to a different value.
      During updating of the stack, this parameter MUST be changed to trigger an update.
    Type: String

Resources:
  rS3toSSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: customPermission
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  !Sub 'arn:aws:s3:::${pS3BucketName}/${pS3toSSMObject}'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: '*'

  rS3toSSMFunction:
    Type: AWS::Lambda::Function
    DependsOn: rS3toSSMRole
    Properties:
      Handler: index.lambda_handler
      Role: !Sub "${rS3toSSMRole.Arn}"
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          def lambda_handler(event, context):
            try:
               # props
               props = event['ResourceProperties']
               bucket = props['BucketName']
               key = props['ObjectPath']
               # fetch obj
               s3 = boto3.client('s3')
               obj = s3.get_object(Bucket=bucket, Key=key)
               ssm_data = obj['Body'].read().decode('utf-8')
               print(ssm_data)
               status = cfnresponse.SUCCESS
               cfnresponse.send(event, context, status, {'TheValue' : ssm_data})
            except Exception as e:
              print(e)
              status = cfnresponse.FAILED
              cfnresponse.send(event, context, status, {})

      Runtime: python3.6
      Timeout: '10'

  rS3toSSMCustomResource:
      Type: Custom::S3toSSM
      DependsOn:
        - rS3toSSMFunction
      Properties:
          ServiceToken: !Sub "${rS3toSSMFunction.Arn}"
          BucketName: !Sub "${pS3BucketName}"
          ObjectPath: !Sub "${pS3toSSMObject}"
          SSMParameter: !Sub "${pS3toSSMParameterName}"
          pUpdateHash: !Ref pUpdateHash

  rS3toSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "${pS3toSSMParameterName}"
      Type: "String"
      Value: !GetAtt rS3toSSMCustomResource.TheValue
      Description: "SSM parameter for storing s3 information."
